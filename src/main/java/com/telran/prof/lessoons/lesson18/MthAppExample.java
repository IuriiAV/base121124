package com.telran.prof.lessoons.lesson18;

/**
 * Многопоточность - свойство платформы или операционной системы, или виртуальной машины, или
 * приложения, которое говорит о том, что некий процесс операционной системы состоит внутри себя
 * из нескольких потоков, которые работают параллельно
 *
 * Процесс - экземпляр выполняемого приложения, которому выделены независимые ресурсы - процессорное
 * время и память
 * Когда мы запускаем какое - либо приложение, то одному экземпляру данного приложения,
 * соответствует строго только один процесс!!!
 *
 * Поток - это базовая единица выполнения программы(кода)
 * По умолчанию 1 процесс - состоит из одного потока - и этот поток называется главным
 * потоком приложения, в Java он называется "main"
 * Один процесс может состоять из более чем 1 поток, в Java главный поток приложения может
 * порождать другие потоки и они будут работать параллельно
 *
 * Thread - основной класс для работы с потоками в Java
 *
 * ->main -> Thread-0
 *        -> Thread-1
 *        -> Thread-2
 *
 * Для создания потока нужно (1 способ)
 * 1) отнаследоваться от класса Thread
 * 2) переопределить метод run
 * 3) код в методе run это код, который будет выполняться в отдельном потоке
 * 4) запускаем объект с методом run в отдельном потоке
 *
 * Для создания потока нужно (2 способ)
 * 1) имплементировать интерфейс Runnable
 * 2) переопределить метод run
 * 3) код в методе run это код, который будет выполняться в отдельном потоке
 * 4) запускаем объект с методом run в отдельном потоке
 *
 * Поток main - это главный поток нашего приложения, все остальные потоки создаются из
 * потока main, все остальные потоки создаваемые из потока main,
 * это дочерние потоки потока main, а поток main является их родителем
 *
 * Поток main не может завершить свою работу до тех пор, пока не закончили работу все
 * его дочерние потоки
 */

public class MthAppExample {

    //Thread - main
    public static void main(String[] args) {
        String name = Thread.currentThread().getName();
        System.out.println("Method main : Current thread name is " + name);

        Printer printer = new Printer();
        //printer.run();

        Thread thread = new Thread(printer);
        thread.start(); //запуск нового потока, который будет выполнять код
        // написанный в методе run, объекта, который передан в конструктор

        printGreetingsPeriodically();
        System.out.println("End method main");
    }

    private static void printGreetingsPeriodically() {
        String name = Thread.currentThread().getName();
        int count = 0;
        while (true) {
            System.out.println("Hello from " + name + " thread, count = " + count++);


            //Pause in current Thread
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
                //Pause in current Thread
            }
        }
    }
}
